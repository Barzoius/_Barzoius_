<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>bazoius</title>
  
  <style>
    /* Basic Reset */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    @font-face {
    font-family: 'MyCustomFont';
    src: url('Resources/Fonts/Fipps-Regular.otf') format('truetype');
    }

    body {
        font-family: 'MyCustomFont', Arial, sans-serif;
        background-color: #e6dfc3;
        border: 20px solid #21201d;
        border-radius: 0px;
        box-sizing: border-box;
        padding: 10px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* Centered title above the rectangles */
    .title {
      text-align: center;
      font-size: 32px;
      color: #21201d;
      margin-top: 20px;
      font-weight: bold;
    }

    /* Button Container */
    .buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 10px; /* Reduced space between buttons and title */
}

    /* Style for the buttons */
    .button {
  display: inline-block;
  width: 45px;  /* Set a fixed width for smaller buttons */
  height: 45px;  /* Set a fixed height to maintain square shape */
  background-color: #21201d;
  color: #e6dfc3;
  font-size: 16px;
  text-align: center;
  line-height: 50px;  /* Center the text vertically */
  border-radius: 10px; /* Rounded corners */
  cursor: pointer;
  transition: background-color 0.3s ease;
}

/* Hover effect */
.button:hover {
  background-color: #4e4b47;
}

    /* Container for the rectangles */
    .container {
      display: flex;
      justify-content: space-between;
      gap: 10px;
      margin-top: 50px;
      width: 80%;
      margin-left: auto;
      margin-right: auto;
    }

    /* Style for the rectangles */
    .rectangle {
      flex: 1;
      min-width: 0;
      height: 100px;
      background-color: lightgray;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      text-transform: uppercase;
      font-weight: bold;
      font-size: 10px;
      color: #e6dfc3;
      transition: background-color 0.3s ease;
      border-top-left-radius: 10px; 
      border-top-right-radius: 10px; 
      border-bottom-left-radius: 0; 
      border-bottom-right-radius: 0; 
    }

    .rectangle:hover {
      opacity: 0.8;
    }

    /* Hidden expansion area */
    .expansion {
      height: 0;
      background-color: transparent;
      transition: height 0.5s ease, background-color 0.5s ease, width 0.5s ease;
      width: 80%;
      margin-left: auto;
      margin-right: auto;
      overflow-y: auto;  /* Allow vertical scrolling */
      border-top-left-radius: 0; 
      border-top-right-radius: 0; 
      border-bottom-left-radius: 10px; 
      border-bottom-right-radius: 10px; 
    }

    /* Title and image styling */
    .expansion .title {
      text-align: center;
      font-size: 30px;
      color: #e6dfc3;
      font-weight: bold;
      margin-top: 10px;
    }

    .expansion p {
      text-align: center;
      font-size: 20px;
      color: #e6dfc3;
      padding: 20px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="title">MOISEL RARES</div>

  <div class="buttons">
    <a class="button" href="https://www.linkedin.com/in/moisel-rares/" target="_blank">Li</a>
    <a class="button" href="https://github.com/Barzoius" target="_blank">G</a>
    <a class="button" href="https://example.com/link3" target="_blank">@</a>
  </div>

  <div class="container">
    <div class="rectangle" data-color="#983738" data-file="indexRed.html">CV</div>
    <div class="rectangle" data-color="#bc6840" data-file="indexOrange.html">WORK</div>
    <div class="rectangle" data-color="#ce954b" data-file="indexYellow.html">THESIS</div>
    <div class="rectangle" data-color="#af7b85" data-file="indexPink.html">BLOG</div>
    <div class="rectangle" data-color="#554a86" data-file="indexPurple.html">GAME</div>
    <div class="rectangle" data-color="#21201c" data-file="indexBlack.html">3D</div>
  </div>

  <div class="expansion"></div>

  <script>
    const rectangles = document.querySelectorAll('.rectangle');
    const expansion = document.querySelector('.expansion');
    const container = document.querySelector('.container');

    // Set the initial background color of the rectangles based on their data-color
    rectangles.forEach(rectangle => {
      const color = rectangle.getAttribute('data-color');
      rectangle.style.backgroundColor = color; // Set the background color from the data-color attribute
    });

    // Function to set the exact width of the expansion div based on container width
    function setExactExpansionWidth() {
      const containerWidth = container.getBoundingClientRect().width;
      expansion.style.width = `${containerWidth}px`;
    }

    // Function to calculate the available space at the bottom of the page
    function calculateAvailableHeight() {
      const windowHeight = window.innerHeight;
      const expansionRect = expansion.getBoundingClientRect();
      const bottomSpace = windowHeight - expansionRect.top;

      const marginBottom = 30; // Adding a buffer space (30px) from the bottom edge
      return bottomSpace - marginBottom; // Subtract the marginBottom from the available space
    }

    // Function to handle expansion and collapse
    function expandRectangle(color, file, rectangle) {
      // Set the background color of the expansion div
      expansion.style.backgroundColor = color;

      // Load the HTML file dynamically into the expansion
      fetch(file)
        .then(response => response.text())
        .then(data => {
          expansion.innerHTML = data;  // Insert the HTML content into the expansion div
        })
        .catch(error => {
          expansion.innerHTML = '<p>Error loading content. Please try again later.</p>';
          console.error('Error loading the HTML file:', error);
        });

      // Set exact width based on container
      setExactExpansionWidth();

      // Dynamically calculate the expansion height based on available space
      const availableHeight = calculateAvailableHeight();

      // Set the expansion height, ensuring it fits within the available space
      expansion.style.height = `${Math.min(availableHeight, 500)}px`; // Limiting maximum height to 500px

      // Change the background color of the clicked rectangle to match the expansion color
      rectangle.style.backgroundColor = color;
    }

    // Add event listeners to each rectangle
    rectangles.forEach(rectangle => {
      rectangle.addEventListener('click', function(event) {
        // Prevent click from bubbling up to the document
        event.stopPropagation();

        // Get the color and file data attributes from the clicked rectangle
        const color = this.getAttribute('data-color');
        const file = this.getAttribute('data-file');

        // Expand the rectangle and load the corresponding HTML file
        expandRectangle(color, file, this);
      });
    });

    // Click event to retract the expansion if clicked outside
    document.addEventListener('click', function(event) {
      if (!container.contains(event.target) && !expansion.contains(event.target)) {
        expansion.style.height = '0';
        expansion.style.backgroundColor = 'transparent';
        // Reset the rectangle colors when expansion collapses
        rectangles.forEach(rectangle => {
          const color = rectangle.getAttribute('data-color'); // Re-fetch the initial color
          rectangle.style.backgroundColor = color; // Reset to the original color
        });
      }
    });

    setExactExpansionWidth();
    window.addEventListener('resize', function() {
      setExactExpansionWidth();
      if (expansion.style.height !== '0px') {
        expansion.style.height = `${Math.min(calculateAvailableHeight(), 500)}px`;
      }
    });
  </script>
</body>
</html>
